"""
zigbee.py
By Calin Ciordas, 2014

This module implements the XBee ZB (ZigBee) API library.
Based on the Digi document "XBee/XBee-PRO ZB RF Modules" downloaded
from 'http://ftp1.digi.com/support/documentation/90000976_V.pdf'.
"""

import abc
import ATCommands as AT
import struct


# ------- ZigBeeAPIFrame -------- #

class ZigBeeAPIFrame(object):
    """
    Abstract class representing a generic ZigBee API frame.
    Base of the hierarchy of classes describing such frames.
    """
    __metaclass__ = abc.ABCMeta
    
    # supported API frame types
    frametypes = \
    {
        0x08 : "AT Command",
        0x09 : "AT Command - Queue Parameter Value",
        0x10 : "ZigBee Transmit Request",
        0x11 : "Explicitely Addressing ZigBee Command Frame",
        0x17 : "Remote Command Request",
        0x21 : "Create Source Route",
        0x88 : "AT Command Response",
        0x8A : "Modem Status",
        0x8B : "ZigBee Transmit Status",
        0x90 : "ZigBee Receive Packet (AO=0)",
        0x91 : "ZigBee Explicit RX Indicator (AO=1)",
        0x92 : "ZigBee IO Data Sample RX Indicator",
        0x94 : "XBee Sensor Read Indicator (AO=0)",
        0x95 : "Node Indentification Indicator (AO=0)",
        0x97 : "Remote Command Response",
        0xA0 : "Over-the-Air Firmware Update Status",
        0xA1 : "Route Record Indicator",
        0xA3 : "Many-to-One Route Request Indicator",
    }

    # frame start delimiter
    SOM = 0x7E   
    
    def __init__(self, frametype):
        """
        @frametype indicates which API message is contained in the frame payload
        """
        if not ZigBeeAPIFrame.frametypes.has_key(frametype):
            raise ValueError("'0x%x' is not a valid frame type" % frametype)                        
        self.frametype = frametype


# --------- ZigBeeAPIFrameSend -------- #
        
class ZigBeeAPIFrameSend(ZigBeeAPIFrame):
    """
    Abstract class representing a generic ZigBee API frame
    generated by the library and sent to an XBee radio.
    """
    
    def __init__(self, frametype):
        """
        @frametype indicates which API message is contained in the frame payload
        """
        ZigBeeAPIFrame.__init__(self, frametype)
        self.payload = b''

    def checksum_calculate(self):
        """
        Calculate the payload checksum.
        """        
        total = 0
        for b in self.payload:
            total += ord(b)
        total = total & 0xFF   # keep only the lowest 8 bits
        return 0xFF - total    # subtract sum from 0xFF

    @abc.abstractmethod    
    def pack(self):
        """ 
        Convert all the data fields of an API frame into binary format and pack the chunks into one buffer.
        The format used for the binary conversion and the order of packing the chunks into the buffer in
        described in the Digi documentation and is specific to each API frame.
        Return buffer to caller.
        """
        buffer  = b''
        buffer += struct.pack(">BH", ZigBeeAPIFrame.SOM, len(self.payload))   # pack header (SOM & size)
        buffer += self.payload                                                # the payload is packed by derived class implementation
        buffer += struct.pack(">B", self.checksum_calculate())                # pack checksum last
        return buffer


# ---------- ZigBeeAPIFrame_TXRequest --------- #

class ZigBeeAPIFrame_TXRequest(ZigBeeAPIFrameSend):
    """
    A Transmit Request API frame. 
    It causes the XBee module to send data as an RF packet to the specified destination.
    """

    FrameType = 0x10
    
    # used to pack the fixed size fields of the payload (pre-compiled for performance reasons)
    packer = struct.Struct(">BBQHBB")

    def __init__(self, RFdata, dest_addr64, dest_addr16, bcast_radius, options, frameID):        
        """
        @RFdata        data that is sent to  the destination device
        @dest_addr64   the 64-bit address of the destination device
        @dest_addr16   the 16-bit address of the destination device
        @bcast_radius  broadcast radius; the max number of hops a broadcast transmission can occur
        @options       bitfied of supported transimission options (see documentation)
        @frameID       correlation frame ID (if set to 0, no response is sent)
        """
        ZigBeeAPIFrame.__init__(self, ZigBeeAPIFrame_TXRequest.FrameType)

        self.RFdata       = RFdata
        self.dest_addr64  = dest_addr64
        self.dest_addr16  = dest_addr16
        self.bcast_radius = bcast_radius 
        self.options      = options
        self.frameID      = frameID

    def pack(self):
        """ 
        Convert all the data fields of the API frame into
        binary format and pack the chunks into one buffer.
        """

        # pack the fixed size fields of the payload
        self.payload = ZigBeeAPIFrame_TXRequest.packer.pack(self.frametype   , self.frameID,
                                                            self.dest_addr64 , self.dest_addr16, 
                                                            self.bcast_radius, self.options)
        # pack the RF data
        self.payload += struct.pack(str(len(self.msg)) + "s", self.msg)

        # assemble the entire frame
        return ZigBeeAPIFrameSend.pack(self)


# ----------- ZigBeeAPIFrame_ATCommand ---------- #
        
class ZigBeeAPIFrame_ATCommand(ZigBeeAPIFrameSend):
    """
    An AT command sent to the local radio.
    Used to query or set module parameters on the local device.
    """

    FrameType = 0x08

    # used to pack the fixed size fields of the payload (pre-compiled for performance reasons)
    packer = struct.Struct(">BB")
    
    def __init__(self, command, param, frameID):
        """
        @command two ASCII chars that indentify the AT command
        @param   if None, the register is queried; if present, the given value is saved in the register
        @frameID correlation frame ID (if set to 0, no response is sent)
        """
        ZigBeeAPIFrame.__init__(self, ZigBeeAPIFrame_ATCommand.FrameType)

        self.cmd     = AT.make_command(command, param)
        self.frameID = frameID
        
    def pack(self):
        """ 
        Convert all the data fields of the API frame into
        binary format and pack the chunks into one buffer.
        """

        # pack the fixed size fields of the payload
        self.payload = ZigBeeAPIFrame_ATCommand.packer.pack(self.frametype,
                                                            self.frameID)
        # pack the AT command
        self.payload += self.cmd.pack()
            
        # assemble the entire frame
        return ZigBeeAPIFrameSend.pack(self)


# ============================================================== #
    
# --------- ZigBeeAPIFrameRecv -------- #

class ZigBeeAPIFrameRecv(ZigBeeAPIFrame):
    """
    Abstract class representing a generic ZigBee API
    frame received by the library from an XBee radio.
    """

    def __init__(self, payload, chksum):
        """
        @payload stores the binary representation of the frame *payload* (not the entire frame)
        @chksum the checksum value
        """
        ZigBeeAPIFrame.__init__(self, struct.unpack(">B", payload[0])[0])

        self.payload = payload
        self.chksum  = chksum

        if not self.checksum_verify():
            raise AssertionError("bad checksum");
                
    def checksum_verify(self):
        """
        Verifies the frame checksum.
        """        
        total = 0
        for b in self.payload:
            total += ord(b)
        total = total + ord(self.chksum)   # we include the checksum (but not the SOM and length)
        return total & 0xFF == 0xFF


# ----------- ZigBeeAPIFrame_TXStatus ---------- #

class ZigBeeAPIFrame_TXStatus(ZigBeeAPIFrameRecv):
    """
    A Transmit Status API frame. 
    When a TX Request is completed, the module sends a TX Status message.
    This message indicates whether the packet was transmitted successfully.
    """

    FrameType = 0x8B

    # used to unpack the payload (pre-compiled for performance reasons)
    unpacker = struct.Struct(">BHBBB")

    # supported delivery status values
    delivery_status_values = \
    {
        0x00 : "success",
        0x01 : "MAC ACK failure",
        0x02 : "CCA failure",
        0x15 : "invalid destination endpoint",
        0x21 : "network ACK failure",
        0x22 : "not joined to network",
        0x23 : "self-addressed",
        0x24 : "address not found",
        0x25 : "route not found",
        0x26 : "broadcast source failed to hear a neighbour relay the message",
        0x2B : "invalid binding table index",
        0x2C : "resource error lack of free buffers, timers, etc.",
        0x2D : "attempted broadcast with APS transmission",
        0x2E : "attempted unicast with APS transmission, but EE=0",
        0x32 : "resource error lack of free buffers, timers, etc.",
        0x74 : "data payload too large",        
    }

    # supported discovery status values
    discovery_status_values = \
    {
        0x00 : "no discovery overhead",
        0x01 : "address discovery",
        0x02 : "route discovery",
        0x03 : "address and route",
        0x40 : "extended timeout discovery"
    }
    
    def __init__(self, payload, chksum):
        """
        Parse a given buffer containing the binary representation of an API frame and extract its data fields.
        @payload stores the binary representation of the frame *payload* (not the entire frame)
        @chksum the checksum value
        """
        ZigBeeAPIFrameRecv.__init__(self, payload, chksum)

        self.frameID,         \
        self.dest_addr16,     \
        self.tx_retry_count,  \
        self.delivery_status, \
        self.discovery_status = ZigBeeAPIFrame_TXStatus.unpacker.unpack_from(payload, 1) 


# ---------- ZigBeeAPIFrame_ATCommandResponse ----------- #

class ZigBeeAPIFrame_ATCommandResponse(ZigBeeAPIFrameRecv):
    """
    Sent in response to an AT Command message.
    Some commands will send back multiple frames.
    """

    FrameType = 0x88

    # used to unpack the payload (pre-compiled for performance reasons)
    unpacker = struct.Struct(">B2sB")

    # supported command status values
    command_status_values = \
    {
        0x00 : "OK",
        0x01 : "error",
        0x02 : "invalid command",
        0x03 : "invalid parameter",
        0x04 : "TX failure"
    }
    
    def __init__(self, payload, chksum):
        """
        Parse a given buffer containing the binary representation of an API frame and extract its data fields.
        @payload stores the binary representation of the frame *payload* (not the entire frame)
        @chksum the checksum value
        """
        ZigBeeAPIFrameRecv.__init__(self, payload, chksum)

        self.frameID, \
        cmd,          \
        self.status   = ZigBeeAPIFrame_ATCommandResponse.unpacker.unpack_from(payload, 1) 
        self.command  = AT.parse_command(cmd, payload) 


# ----------- ZigBeeAPIFrame_RXPacket ---------- #

class ZigBeeAPIFrame_RXPacket(ZigBeeAPIFrameRecv):
    """
    An RF packet received by the radio.
    """
    
    FrameType = 0x90

    # used to unpack the payload (pre-compiled for performance reasons)
    unpacker = struct.Struct(">QHB")

    def __init__(self, payload, chksum):
        """
        Parse a given buffer containing the binary representation of an API frame and extract its data fields.
        @payload stores the binary representation of the frame *payload* (not the entire frame)
        @chksum the checksum value
        """
        ZigBeeAPIFrame.__init__(self, payload, chksum)

        self.dest_addr64, \
        self.dest_addr16, \
        self.options      = ZigBeeAPIFrame_RXPacket.unpacker.unpack_from(payload, 1) 
        self.data         = struct.unpack(str(len(payload) - 12) + "s", payload[12:])[0]
        

# ZigBee API Frames by frame type
ZigBeeAPIFrames = \
{
    0x08 : ZigBeeAPIFrame_ATCommand,
    0x10 : ZigBeeAPIFrame_TXRequest,
    0x88 : ZigBeeAPIFrame_ATCommandResponse,
    0x8B : ZigBeeAPIFrame_TXStatus,
    0x90 : ZigBeeAPIFrame_RXPacket
}
